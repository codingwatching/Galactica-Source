
var vec3 = require('gl-vec3')


export default function (noa) {
    return {

        name: 'boatmesh',

        order: 100,

        state: {
            mesh: null,
            offset: null,
			moving:false,
			fired:false,
			walkcycle:0,
			health: 1000,
			dead:false,
			far:false,
			npcList:null,
			playerMesh:null,
			mob:false,
			thisSocket:null
			
        },


        onAdd: function (eid, state) {
			state.playerMesh=noa.ents.getState(noa.playerEntity, noa.entities.names.mesh).mesh
            // implicitly assume there's already a position component
            var posDat = noa.ents.getPositionData(eid)
            if (state.mesh) {
                noa.rendering.addMeshToScene(state.mesh, false, posDat.position)
				noa.rendering.addMeshToScene(state.mesh._children[0], false, posDat.position)
			
			state.mesh._children[0].isPickable=true
			
				//var body = noa.ents.getPhysicsBody(eid)
            } else {
                throw new Error('Mesh component added without a mesh - probably a bug!')
            }
            if (!state.offset) state.offset = new vec3.create()

            // set mesh to correct position
            var rpos = posDat._renderPosition
            state.mesh.position.copyFromFloats(
                rpos[0] + state.offset[0],
                rpos[1] + state.offset[1],
                rpos[2] + state.offset[2])
        },


        onRemove: function (eid, state) {
            state.mesh.dispose()
        },



        renderSystem: function (dt, states) {
            // before render move each mesh to its render position, 
            // set by the physics engine or driving logic

            states.forEach(state => {
                var id = state.__id
				
					if(state.dead){
						
						for (const key in state.npcList) {
    
								if(state.npcList[key]==id){
								
									//delete state.npcList[key]
									//state.dead=true
									
									state.thisSocket.emit('despawn', key)
									
									//noa.ents.getState(data.id, 'mesh2').dead=true
								}
					  }
					 noa.entities.deleteEntity(id)
					}
					
					
					
				var c=	getdistance(state.playerMesh,state.mesh)
				//console.log(c);
					
					function getdistance (playerMesh,playerMesh2){
                                        var dblDistanceX = playerMesh.position.x - playerMesh2.position.x;
										var dblDistanceY = playerMesh.position.y - playerMesh2.position.y;
										var dblDistanceZ = playerMesh.position.z - playerMesh2.position.z;
										
								var realDistance=Math.sqrt((dblDistanceX * dblDistanceX) + (dblDistanceY * dblDistanceY) + (dblDistanceZ * dblDistanceZ));
								return  realDistance;
							}
					
					if(c>200){//was 40
						
						for (const key in state.npcList) {
    
								if(state.npcList[key]==id){
									
									
								state.thisSocket.emit('despawn', key)
									//delete state.npcList[key]
									//state.dead=true
									
									//noa.ents.getState(data.id, 'mesh2').dead=true
								}
					  }
						
					}
		
	
				
				
				

                var rpos = noa.ents.getPositionData(id)._renderPosition
                state.mesh.position.copyFromFloats(
                    rpos[0] + state.offset[0],
                    rpos[1] + state.offset[1],
                    rpos[2] + state.offset[2])
            })
        }
		
		


    }
}
