
var vec3 = require('gl-vec3')


export default function (noa) {
    return {

        name: 'stats',

        order: 100,

        state: {
            health: 5,
            dead: false,
			mob:false,
			mesh:null,
			walkcycle:0,
			walking:false,
			mesh:null,
			looking:null,
			lookingangle:0,
			playermesh:null,
			particle:null,
			hit:false,
			music:null,
			name:null,
			rideable:false,
			random:0,
			thisSocket:null,
			tag:null,
			fleeing:false,
			body:null,
			pos:null
			
        },


        onAdd: function (eid, state) {
			
			if(state.name=='arrow'){
				return;
			}
		
            state.playermesh=noa.ents.getState(noa.playerEntity, noa.entities.names.mesh).mesh
			
			/*state.pos=noa.ents.getState(eid, noa.entities.names.position).position
			setTimeout(function(){ 
			state.body = noa.ents.getPhysicsBody(eid)
			
				if(state.pos!==null){
						if(noa.registry.getBlockSolidity(state.pos[0],state.pos[1]+0.5,state.pos[2])==true){
							
							
							if(state.body!==null ){
							state.body.applyImpulse([0,1,0])
							}
							
						}	
				
				}
			}, 4000);*/
			
			 //state.mesh=noa.ents.getState(eid, noa.entities.names.entmesh).mesh
			
		//	state.particle=makeparticle(mod+"textures/item/snowball")
			
			
			//state.random=Math.floor(Math.random()*5)
			
			
			//state.particle.start();
			
			 /* function makeparticle(name){
						  var particleSystem = new BABYLON.ParticleSystem("particles", 200, scene);
						particleSystem.particleTexture= new BABYLON.Texture(name+".png", scene, false, true, BABYLON.Texture.NEAREST_SAMPLINGMODE);
					particleSystem.color1 = new BABYLON.Color4(1,1,1, 1.0);
					particleSystem.color2 = new BABYLON.Color4(1,1,1, 1.0);
					particleSystem.colorDead = new BABYLON.Color4(1,1,1, 1.0);

						// Position where the particles are emiited from
						var box=state.mesh._children[5]
						

							   particleSystem.emitter =box
							   particleSystem.minSize =0.1
							   particleSystem.maxSize =0.3
							   particleSystem.blendMode =BABYLON.ParticleSystem.BLENDMODE_STANDARD;
							  var matrixangle=noa.camera.getDirection()
							   particleSystem.direction1 = new BABYLON.Vector3(0.2,0.2,-0.2);
							   particleSystem.direction2 = new BABYLON.Vector3(-0.2,0.3,0.2);
							   particleSystem.minEmitPower = 1;
								particleSystem.maxEmitPower = 2;
								particleSystem.updateSpeed = 0.020
							
								//particleSystem.manualEmitCount = 3;
								 particleSystem.gravity = new BABYLON.Vector3(0,1, 0);
								//state.music = new BABYLON.Sound("Music", "/sound/tap.wav", scene)
								
								
								 
								 
						return particleSystem;
			  }*/
	 
        },


        onRemove: function (eid, state) {
			
		 
        
           
        },



        renderSystem: function (dt, states) {
            // before render move each mesh to its render position, 
            // set by the physics engine or driving logic

            states.forEach(state => {
                var id = state.__id
				
			
				
				if(state.name=='arrow'){
				return;
			}
			
			if(state.name=='minecart'){
				return;
			}
			
			if(state.name=='boat'){
				return;
			}
				if(state.hit){
					
					 state.particle.start()
					 //state.music.play();
					 setTimeout(async function() {
					 state.hit=false
					 state.particle.stop()
				}, 1000)
				return;
					
				}
				state.walkcycle++
				
				if(state.walking=='zombie'){
					
					state.mesh._children[1].rotation.x=0.5*Math.PI/8+Math.sin(state.walkcycle*0.08)*0.5
				state.mesh._children[2].rotation.x=0.5*Math.PI/8+Math.sin(state.walkcycle*0.08)*1.5
					state.mesh._children[3].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI))-Math.PI/2;//right arm
		
		       state.mesh._children[4].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI))-Math.PI/2;// left arm
					
				}
				if(state.walking=='birdbot'){
					
					state.mesh._children[1].rotation.y=-0.7* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI))+Math.PI/4;// left legMath.PI;
			state.mesh._children[2].rotation.y=-0.7* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI))-Math.PI/4;
			
			state.mesh._children[1].rotation.z=1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI))+Math.PI/2;// left legMath.PI;
			state.mesh._children[2].rotation.z=1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI))-Math.PI/2;
			
			state.mesh._children[3].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI));//right arm
		
		       state.mesh._children[4].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI));// left arm
					
				}
				if(state.walking=='robot'){
					
					state.mesh._children[1].rotation.x=Math.PI/2//0.5*Math.sin(state.walkcycle*0.08)*0.5
				state.mesh._children[2].rotation.x=Math.PI/2//0.5*Math.sin(state.walkcycle*0.08)*1.5
				
					
				}
				
				if(state.walking=='robotstop'){
					
					state.mesh._children[1].rotation.x=0
				state.mesh._children[2].rotation.x=0
				
					
				}
				if(state.walking=='zombiearcher'){
					
					state.mesh._children[1].rotation.x=1*Math.PI/8+Math.sin(state.walkcycle*0.08)*0.5
				state.mesh._children[2].rotation.x=0
					state.mesh._children[3].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI))-Math.PI/2;//right arm
		
		       state.mesh._children[4].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI))-Math.PI/2;// left arm
					
				}
				
				if(state.walking=='dog'){
					
					state.mesh._children[1].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI));//left leg 
		
		    state.mesh._children[2].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI));// right leg
	
		   state.mesh._children[3].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI));//right arm
		
		    state.mesh._children[4].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI));// left arm
				}
				
				if(state.walking=='cow'){
					
				state.mesh._children[1].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI))-Math.PI/2;//left leg 
		
		    state.mesh._children[2].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI))-Math.PI/2;// right leg
	
		   state.mesh._children[3].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI))-Math.PI/2;//right arm
		
		    state.mesh._children[4].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI))-Math.PI/2;// left arm
					
				}
				
				if(state.walking=='horse'){
					
				state.mesh._children[1].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI));//left leg 
		
		    state.mesh._children[2].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI));// right leg
	
		   state.mesh._children[3].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI));//right arm
		
		    state.mesh._children[4].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI));// left arm
					
				}
				
				if(state.walking=='villager'){
					
				state.mesh._children[1].rotation.x= -Math.PI/3
		
		    state.mesh._children[2].rotation.x= -Math.PI/3
	
		   state.mesh._children[3].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI))-Math.PI/2;//right arm
		
		    state.mesh._children[4].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI))-Math.PI/2;// left arm
					
				}
				
			    if(state.walking=='none'){
					
					state.mesh._children[1].rotation.x=0;//right arm
		
		      state.mesh._children[2].rotation.x= 0;//
				
				state.mesh._children[3].rotation.x=0;//right arm
		
		      state.mesh._children[4].rotation.x= 0;//
					
					
				}
				
				if(state.walking=='customnone'){
					
					state.mesh._children[1].rotation.x=0;//right arm
		
		      state.mesh._children[2].rotation.x= 0;//
				
				state.mesh._children[3].rotation.x=0;//right arm
		
		      state.mesh._children[4].rotation.x= 0;//
					
					
				}
				
				/*if(state.looking){
					state.angle3=lookat(state.mesh,state.playermesh);
					state.mesh.rotation.y=lerp(state.mesh.rotation.y,state.angle3,1);
					//state.mesh._children[0].rotation.y=lerp(state.mesh._children[0].rotation.y,state.angle3-state.mesh.rotation.y-Math.PI,1);
				}*/
					function lookat(objectlooker,objecttarget){
	
						var direction=Math.atan2(objectlooker.position.x-objecttarget.position.x,objectlooker.position.z-objecttarget.position.z)
						return direction;
					}
					
					function lerp(start, end, amt){
				return (1-amt)*start+amt*end
			}
				
			
				
				
                   
              
            })
        }


    }
}
