
var vec3 = require('gl-vec3')


export default function (noa) {
    return {

        name: 'propulsion',

        order: 100,

        state: {
            mesh: null,
            offset: null,
			moving:false,
			fired:false,
			walkcycle:0,
			health: 1000,
			dead:false,
			far:false,
			npcList:null,
			playerMesh:null,
			mob:false,
			thisSocket:null,
			body:null,
			pos:null,
			uid:null,
			mac1:0,
			mac2:0,
			mac3:0,
			active:false
			
		
			
        },


        onAdd: function (eid, state) {
			
			state.body=noa.ents.getPhysicsBody(eid)
			state.pos=noa.ents.getState(eid, 'position').position
			
			state.mac1=Math.random()*3-1.5
			state.mac2=Math.random()*3-1.5
			state.mac3=Math.random()*3-1.5
			state.active=true
			
			var posDat = noa.ents.getPositionData(eid)
			state.pos=posDat.position
        },


        onRemove: function (eid, state) {
            //state.mesh.dispose()
			console.log('firework died')
			 
			//noa.setParticle(mod+'textures/particle/big_smoke',scene,state.mesh)
        },



        renderSystem: function (dt, states) {
            // before render move each mesh to its render position, 
            // set by the physics engine or driving logic

            states.forEach(state => {
                var id = state.__id
				
				
				if(state.active==false){
					var c=noa.ents.getState(noa.playerEntity, 'position').position
					noa.entities.setPosition(id,c)
					//state.active=true;
					
					 noa.entities.removeComponent(id, noa.entities.names.propulsion)
					return;
				}
				if(state.body!==null){
					state.body.gravityMultiplier = 0
					state.body.airDrag = 2
					state.body.applyForce([state.mac1,state.mac2,state.mac3])
				
				}
				
				if(state.pos[1]>70 || state.pos[1]<10){
					for (const key in state.npcList) {
    
								if(state.npcList[key]==id){
								
									state.thisSocket.emit('despawn', key)
									
								}
					  } 
					
				}
				
				
				if(state.pos[0]<-30 || state.pos[0]>30){
						for (const key in state.npcList) {
    
								if(state.npcList[key]==id){
								
									state.thisSocket.emit('despawn', key)
									
								}
					  }
					
				}
				
				if(state.pos[2]<-30 || state.pos[2]>30){
						for (const key in state.npcList) {
    
								if(state.npcList[key]==id){
								
									state.thisSocket.emit('despawn', key)
									
									
								}
					  }
					
				}
				
				
		 })
		
		


    },
	
	/*function lerp (start, end, amt){
				return (1-amt)*start+amt*end
			}*/
}
}
