'use strict'

var vec3 = require('gl-vec3')


export default function (noa) {
    return {

        name: 'flee',

        order: 100,

        state: {
            mesh: null,
            offset: null,
			startfall:0,
			endfall:0,
			walkcycle:0,
			angle3:0,
			headready:false,
			playerpos:null,
			entpos:null,
			rand:null,
			headcool:0,
			height:0,
			rightone:0,
			target:0,
			playerMesh:null,
			walkcyle:0,
			body:null,
			playerbody:null,
			npcList:null,
			targetmesh:null,
			foundtarget:false,
			dist:null,
			thisSocket:null,
			name:null
			
		
			
			
			
        },


        onAdd: function (eid, state) {
			state.body = noa.ents.getPhysicsBody(eid)
			state.playerbody=noa.ents.getPhysicsBody(noa.playerEntity)
			state.mesh=noa.ents.getState(eid,noa.entities.names.entmesh).mesh//noa.entities.getMeshData(eid).mesh
			state.playerMesh=noa.entities.getMeshData(noa.playerEntity).mesh
			state.playerpos=noa.entities.getPosition(noa.playerEntity);
			state.entpos=noa.entities.getPosition(eid);
			
			state.height=0.5-0.9
	  
				
					
						
							
						
						
							function getdistance (playerMesh,playerMesh2){
                                        var dblDistanceX = playerMesh.position.x - playerMesh2.position.x;
										var dblDistanceY = playerMesh.position.y - playerMesh2.position.y;
										var dblDistanceZ = playerMesh.position.z - playerMesh2.position.z;
										
								var realDistance=Math.sqrt((dblDistanceX * dblDistanceX) + (dblDistanceY * dblDistanceY) + (dblDistanceZ * dblDistanceZ));
								return  realDistance;
							}
			
        },


        onRemove: function (eid, state) {
            console.log('pet super duper died');
        },

     

        renderSystem: function (dt, states) {
			
            // before render move each mesh to its render position, 
            // set by the physics engine or driving logic

            states.forEach(state => {
				
				
                var id = state.__id
				
				
				
				
				
				if(!state.foundtarget){
					var c=noa.ents.getState(noa.playerEntity, noa.entities.names.stats).mob
					
					if(c==false){
									
								
								state.targetmesh=noa.ents.getState(noa.playerEntity, noa.entities.names.stats).mesh
								
								
									 state.dist=getdistance(state.targetmesh,state.mesh);
					                if(state.dist<10){
										
										state.foundtarget=true
										
										console.log('cool zombie')
									}
									if(state.dist>30){
										
										state.foundtarget=false
										
									}
				
				
					 
								
								}
					
					
				}
			
			else if(!state.foundtarget){
			for (const key in state.npcList) {
				 
                   // var c=noa.ents.getState(state.npcList[key], noa.entities.names.health).mob
					 var c=noa.ents.getState(state.npcList[key], noa.entities.names.stats).mob
								if(c==false){
									
								state.targetmesh=noa.ents.getState(state.npcList[key], noa.entities.names.stats).mesh
							
									 state.dist=getdistance(state.targetmesh,state.mesh);
					                if(state.dist<10){
										
										state.foundtarget=true
										
										console.log('cool zombie')
									}
									if(state.dist>30){
										
										state.foundtarget=false
										
									}
				
				
					 
								
								}
					  }
			}else{
				
				if(state.targetmesh!==null){
					
					var matrixangle=noa.camera.getDirection()
				state.angle3=lookat(state.mesh,matrixangle);
				//state.angle3=lookat(state.mesh,state.targetmesh);
				state.dist=getdistance(state.targetmesh,state.mesh);
				}
			}
					 //dist=getdistance(state.playerMesh,npcmesh);
					 
				
				
					 //state.angle3=lookat(npcmesh,state.playerMesh);
		
						
				
				
				
	
				function getdistance (playerMesh,playerMesh2){
                                        var dblDistanceX = playerMesh.position.x - playerMesh2.position.x;
										var dblDistanceY = playerMesh.position.y - playerMesh2.position.y;
										var dblDistanceZ = playerMesh.position.z - playerMesh2.position.z;
										
								var realDistance=Math.sqrt((dblDistanceX * dblDistanceX) + (dblDistanceY * dblDistanceY) + (dblDistanceZ * dblDistanceZ));
								return  realDistance;
							}
				
				function lookat(objectlooker,objecttarget){
	
						var direction=Math.atan2(objectlooker.position.x-(objecttarget[0]*2),objectlooker.position.z-(objecttarget[2]*4))
						return direction;
					}

					function headerangle(objectlooker,objecttarget){
					var headangle=(objectlooker[1]+state.height)-objecttarget[1]
						return headangle;
					}
				
				
	            
			
			state.walkcycle++
			if(state.dist>30 ){
				
				
				noa.ents.getState(id, noa.entities.names.stats).walking='none'
				noa.ents.getState(id, noa.entities.names.stats).looking=false
				//noa.ents.getState(id, noa.entities.names.health).lookingangle=state.mesh.rotation.y
				
				
				
				
				
			}
			if(state.dist<1){
				var bob = noa.ents.getPhysicsBody(noa.playerEntity)
				if(bob.resting[1]==-1){
				 bob.applyImpulse([state.body.velocity[0], 5, state.body.velocity[0]])
				 if(noa.ents.getState(noa.playerEntity, 'stats').health>0){
				 if(noa.ents.getState(noa.playerEntity, 'stats').health %1){
									var myobj = document.getElementById('hearts');
				
									myobj.remove();
									noa.soundy('/random/classic_hurt.ogg')
									}
									noa.ents.getState(noa.playerEntity, 'stats').health-=0.5
				 }
				}
			}
			if(state.dist>2+(state.rand)&& state.dist<30 /*&& state.body.resting[1]<0*/){
				state.headcool=0;
				if(Math.random()*1000<10){
				noa.soundy('/random/breath.ogg')
				}
			
				state.mesh.rotation.y=lerp(state.mesh.rotation.y,state.angle3,1);
				state.mesh._children[0].rotation.y=lerp(state.mesh._children[0].rotation.y,state.angle3-state.mesh.rotation.y+Math.PI,1);
				//var c=lerp(state.mesh._children[0].rotation.y,state.angle3-state.mesh.rotation.y+Math.PI,1);
				//state.mesh._children[0].rotation.y=lerp(state.mesh._children[0].rotation.y,state.angle3-state.mesh.rotation.y+Math.PI,1);
				//state.mesh._children[1].rotation.x=1*Math.PI/8+Math.sin(state.walkcycle*0.08)*0.5
				//state.mesh._children[2].rotation.x=1*Math.PI/8+Math.sin(state.walkcycle*0.08)*1.5
					noa.ents.getState(id, noa.entities.names.stats).walking='zombie'
					noa.ents.getState(id, noa.entities.names.stats).looking=true
					//noa.ents.getState(id, noa.entities.names.health).lookingangle=c
					
						//state.mesh._children[3].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (0.5 * Math.PI))-Math.PI/2;//right arm
		
		//state.mesh._children[4].rotation.x= 1.0* Math.cos((0.32 * state.walkcycle) + (1.5 * Math.PI))-Math.PI/2;// left arm
		
			
				
			
				state.body.mass=1;
				state.body.gravityMultiplier=0.6;
			state.body.friction=0.1//0+(state.dist/10);
			state.body.autoStep=true;
			
			if(state.body.inFluid){
				noa.ents.getState(id, 'stats').health-=1
				
				if(noa.ents.getState(id, 'stats').health==0){
					var tag=noa.ents.getState(id, 'stats').tag
					  //state.thisSocket.emit('despawn', tag) 
					  noa.despawn(state.name,tag, state.thisSocket)
				}
			}
			
			//var c=state.mesh._children[0].rotation.x
			//state.mesh._children[0].rotation.x=0;
            
			if(state.body.resting[1]==-1){
			 var a = -3* Math.sin(state.angle3),
						c = -3* Math.cos(state.angle3);
						
						
							if(Math.random()<0.01){
					//var pos=state.entpos//[state.mesh.rotation.x,state.mesh.rotation.y,state.mesh.rotation.z]//noa.entities.getPosition(eid);
							
	//var matrixangle=noa.camera.getDirection()
	//console.log(matrixangle)
						//state.thisSocket.emit('threw-item',{name:'arrow',position:state.entpos,angle:[a,0.5,c]});
							}
				    state.body.applyForce([a, 0.6, c])
				//	state.body.velocity[0]=a
					//state.body.velocity[1]=0
				//	state.body.velocity[2]=c
			}
			  
				
			}
			
			
			function lerp(start, end, amt){
				return (1-amt)*start+amt*end
			}
				

		
			
            })
        }


    }
}
